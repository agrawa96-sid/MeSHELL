/*
 * CS252: Shell project
 *
 * Template file.
 * You will need to add more code here to execute the command table.
 *
 * NOTE: You are responsible for fixing any bugs this code may have!
 *
 * DO NOT PUT THIS PROJECT IN A PUBLIC REPOSITORY LIKE GIT. IF YOU WANT 
 * TO MAKE IT PUBLICALLY AVAILABLE YOU NEED TO REMOVE ANY SKELETON CODE 
 * AND REWRITE YOUR PROJECT SO IT IMPLEMENTS FUNCTIONALITY DIFFERENT THAN
 * WHAT IS SPECIFIED IN THE HANDOUT. WE OFTEN REUSE PART OF THE PROJECTS FROM  
 * SEMESTER TO SEMESTER AND PUTTING YOUR CODE IN A PUBLIC REPOSITORY
 * MAY FACILITATE ACADEMIC DISHONESTY.
 */

#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include "command.hh"
#include "shell.hh"
#include <sstream>

extern char ** environ;

Command::Command() {
		// Initialize a new vector of Simple Commands
		_simpleCommandsArray = std::vector<SimpleCommand *>();

		_outFileName = NULL;
		_inFileName = NULL;
		_errFileName = NULL;
		_backgnd = false;
		_app = false;
		_imod = false;
		_omod = false;
		_ambiguous = false;
}

void Command::insertSimpleCommand( SimpleCommand * simpleCommand ) {
		// add the simple command to the vector
		_simpleCommandsArray.push_back(simpleCommand);
}

void Command::clear() {
		// deallocate all the simple commands in the command vector
		for (auto simpleCommand : _simpleCommandsArray) {
				delete simpleCommand;
		}
		// remove all references to the simple commands we've deallocated
		// (basically just sets the size to 0)
		_simpleCommandsArray.clear();

		// Freeing all File Pointers

		if ( _outFileName ) {
				delete _outFileName;
		}
		_outFileName = NULL;

		if ( _inFileName ){
				delete _inFileName;
		}
		_inFileName = NULL;

		if ( _errFileName ) {
				delete _errFileName;
		}
		// Resetting all Values
		_errFileName = NULL;
		_app = false;
		_backgnd = false;
		_imod = false;
		_omod = false;
		_ambiguous = false;
}

void Command::print() {
		printf("\n\n");
		printf("              COMMAND TABLE                \n");
		printf("\n");
		printf("  #   Simple Commands\n");
		printf("  --- ----------------------------------------------------------\n");

		int i = 0;
		// iterate over the simple commands and print them nicely
		for ( auto & simpleCommand : _simpleCommandsArray ) {
				printf("  %-3d ", i++ );
				simpleCommand->print();
		}

		printf( "\n\n" );
		printf( "  Output       Input        Error        Background\n" );
		printf( "  ------------ ------------ ------------ ------------\n" );
		printf( "  %-12s %-12s %-12s %-12s\n",
						_outFileName?_outFileName->c_str():"default",
						_inFileName?_inFileName->c_str():"default",
						_errFileName?_errFileName->c_str():"default",
						_backgnd?"YES":"NO");
		printf( "\n\n" );
}

void Command::execute() {
		// Don't do anything if there are no simple commands
		if ( _simpleCommandsArray.size() == 0 ) {
				Shell::prompt();
				return;
		}
		// Var Expansion
		int len = _simpleCommandsArray.size();
		// For every simple command fork a new process
		// Setup i/o redirection
		// and call exec
		int dfltin = dup(0);
		int dfltout = dup(1);
		int dflterr = dup(2);
		// Checking Ambiguity
		if (_ambiguous) {
				printf("Ambiguous output redirect.\n");
				clear();
				Shell::prompt();
				return;
		}
		int ret; 
		int ofile;
		int ifile;
		int efile;

		// Setting ErrorFile if any

		if ( _errFileName ) {
				if ( _app ) {
						efile = open ( _errFileName->c_str(),  O_APPEND | O_CREAT | O_WRONLY, 0664);
				}
				else {
						efile = open ( _errFileName->c_str(), O_CREAT | O_TRUNC | O_WRONLY, 0664);
				}
		}
		else {
				efile = dup(dflterr);
		}

		dup2(efile, 2);
		close(efile); 

		// Setting InFile if any

		if ( _inFileName ) {
				ifile = open ( _inFileName->c_str(), O_RDONLY);
		}
		else {
				ifile = dup(dfltin);
		}
		for (int i = 0; i < len; i++) {
				dup2(ifile, 0);
				close(ifile);

				if ( strcmp(_simpleCommandsArray[i]->_argumentsArray[0]->c_str(), "exit") == 0 ) {
						printf("\nExiting ....\n");
						close(dfltin);
						close(dfltout);
						close(dflterr);
						_exit(0);
				}  
				if ( strcmp(_simpleCommandsArray[i]->_argumentsArray[0]->c_str(), "q") == 0 ) {
						close(dfltin);
						close(dfltout);
						close(dflterr);
						printf("\nQuitting ....\n");
						_exit(0);
				} 
				if ( strcmp(_simpleCommandsArray[i]->_argumentsArray[0]->c_str(), "logout") == 0 ) {
						close(dfltin);
						close(dfltout);
						close(dflterr);
						printf("\nLogging out ....\n");
						_exit(0);
				}
				if (i == len - 1) {

						// Setting Outfile if any

						if ( _outFileName ) {
								if ( _app ) {
										ofile = open ( _outFileName->c_str(), O_APPEND | O_CREAT | O_WRONLY, 0664);
								}
								else {
										ofile = open ( _outFileName->c_str(), O_CREAT | O_TRUNC | O_WRONLY, 0664);
								}
						}
						else {
								ofile = dup(dfltout);
						}
				} 
				else {
						int fdpipe[2];
						pipe(fdpipe);
						ofile=fdpipe[1];
						ifile=fdpipe[0];
				}
				dup2(ofile, 1);
				close(ofile); 

				const char * first_arg = _simpleCommandsArray[i]->_argumentsArray[0]->c_str();

				// setenv

				if (strcmp(first_arg, "setenv") == 0) {
						setenv(_simpleCommandsArray[i]->_argumentsArray[1]->c_str(), _simpleCommandsArray[i]->_argumentsArray[2]->c_str(),1);
						continue;
				}

				// unsetenv

				if (strcmp(first_arg, "unsetenv") == 0) {
						unsetenv(_simpleCommandsArray[i]->_argumentsArray[1]->c_str());
						continue;
				}
				// cd

				if (strcmp(first_arg, "cd") == 0) {
						// Go to Home Dir
						if (_simpleCommandsArray[i]->_argumentsArray.size() == 1) {
								char* home = new char[strlen(getenv("HOME"))];
								strcpy(home, getenv("HOME"));
								chdir(home);
								delete (home);
						}

						// Go to provided path

						if (_simpleCommandsArray[i]->_argumentsArray.size() == 2) {

								char *orig_str = new char[strlen(_simpleCommandsArray[i]->_argumentsArray[1]->c_str())];
								strcpy(orig_str, _simpleCommandsArray[i]->_argumentsArray[1]->c_str());
								char *ptr = orig_str;
								char error_message[100] = "cd: can't cd to ";
								strcat(error_message, ptr);
								int val = chdir(ptr);
								if (val == -1) {
										perror(error_message);
								}
								delete (orig_str);
						}

						// More than one path. Throw Error

						if (_simpleCommandsArray[i]->_argumentsArray.size() > 2) {
								perror("Invalid path.");
						}
						continue;
				}

				// Create Child Process

				ret = fork();
				int num = _simpleCommandsArray[i]->_argumentsArray.size() + 1;
				char ** args;
				args = (char**) malloc(num*sizeof(char *));
				int j = 0;
				int end = num - 1;
				for (j = j; j < end; j++) {
						args[j] = strdup(_simpleCommandsArray[i]->_argumentsArray[j]->c_str());
						//                        delete(_simpleCommandsArray[i]->_argumentsArray[j]);
				}
				setenv("_", args[end-1], 1);        
				args[num - 1] = NULL;
				if (ret == 0) {
						if ( strcmp (first_arg, "printenv") == 0) {
								char **ptr = environ; 
								while (1) {
										if (*ptr == NULL) {
												fflush(stdout);
												_exit(1);
										}
										printf("%s\n", *ptr);
										ptr++;
								}
						}
						execvp (first_arg, args);
						perror("execvp");
						close(dfltin);
						close(dfltout);
						close(dflterr);

				}
				else if (ret < 0 ) {
						perror("fork");
						dup2(dfltin,0);
						dup2(dfltout,1);
						dup2(dflterr,2);
						close(dfltin);
						close(dfltout);
						close(dflterr);
						return;
				}
				for (int k = 0; k < end; k++)
						free(args[k]);
				free(args);
		}

		// Restore Default Pipes
		dup2(dfltin,0);
		dup2(dfltout,1);
		dup2(dflterr,2);


		close(dfltin);
		close(dfltout);
		close(dflterr);

		// Checking if Process to run in BG

		if (_backgnd) {
				std::string child_pid = std::to_string(ret);
				setenv("!", child_pid.c_str(), 1); 
		} 
		if (!_backgnd) {
				int exit_status;
				int status;
				waitpid(ret, &exit_status, 0);
				if ( WIFEXITED(exit_status) ) {
						status = WEXITSTATUS(exit_status);
						std::string s = std::to_string(status);
						if (status != 0) {
								if(getenv("ON_ERROR") && strlen(getenv("ON_ERROR")) > 0)
										printf("%s\n", getenv("ON_ERROR"));
						}
						setenv("?", s.c_str(), 1);
				}  
		}
		// Clear to prepare for next command
		clear();
		// Print new prompt
		Shell::prompt();
}

SimpleCommand * Command::_currSimpleCommand;
